const webpack = require('@nativescript/webpack');
const { resolve } = require('path');
const CircularDependencyPlugin = require('circular-dependency-plugin');

module.exports = (env) => {
  env = env || {};
  env.appComponents = env.appComponents || [];
  if (env.android) {
    env.appComponents.push('nativescript-cast/cast-options-provider');
  }
  webpack.init(env);
  webpack.useConfig('typescript');

  webpack.chainWebpack((config) => {
    // shared demo code
    config.resolve.alias.set('@demo/shared', resolve(__dirname, '..', '..', 'tools', 'demo'));
    // config.plugin("circularDependency").use(CircularDependencyPlugin, [
    //   {
    //     exclude: /a\.js|node_modules/,
    //     allowAsyncCycles: false,
    //     cwd: process.cwd(),
    //     // `onStart` is called before the cycle detection starts
    //     onStart({ compilation }) {
    //       console.log('start detecting webpack modules cycles');
    //     },
    //     // `onDetected` is called for each module that is cyclical
    //     onDetected({ module: webpackModuleRecord, paths, compilation }) {
    //       // `paths` will be an Array of the relative module paths that make up the cycle
    //       // `module` will be the module record generated by webpack that caused the cycle
    //       compilation.errors.push(new Error(paths.join(' -> ')))
    //     },
    //     // `onEnd` is called before the cycle detection ends
    //     onEnd({ compilation }) {
    //       console.log('end detecting webpack modules cycles');
    //     },
    //   }
    // ]);
  });

  // Example if you need to share images across demo apps:
  // webpack.Utils.addCopyRule({
  //   from: '../../../tools/images',
  // 	to: 'images',
  //   context: webpack.Utils.project.getProjectFilePath('node_modules')
  // });

  return webpack.resolveConfig();
};
